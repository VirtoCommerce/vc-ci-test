name: Scan image for vulnerabilities
on:
  workflow_dispatch:
  pull_request:
    branches:
      # [dev]
      [test-VCST-923]
  push:
    branches:
      [test-VCST-923]
jobs:
  build:
    name: Scan
    runs-on: ubuntu-22.04
    env:
      tag: '3.907.0-pr-2943-82e8-vcst-3636-82e8fe2c'
      GH_TOKEN: ${{ secrets.REPO_TOKEN }}
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/virtocommerce/platform:${{ env.tag }}'
          # image-ref: 'ghcr.io/virtocommerce/virtostart:3.818.0-8a4fba1e'
          format: 'json'
          exit-code: '0'
          ignore-unfixed: false #true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: './${{ env.tag }}.json'
      - name: Publish file
        uses: actions/upload-artifact@v4
        with:
          name: '${{ env.tag }}.json'
          path: './${{ env.tag }}.json'
      - name: Process results
        id: trivyResult
        shell: pwsh
        env:
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
        run: |
          $jiraBaseUrl = "https://virtocommerce.atlassian.net"
          $jiraUser = $env:JIRA_USER
          $jiraToken = $env:JIRA_TOKEN
          $jiraProject = "VDS"
          $vulnerabilitySkipList = @('CVE-2025-6020')
          $vulnerabilities = $(get-content './${{ env.tag }}.json' -Raw | ConvertFrom-Json).Results.Vulnerabilities
          $vulnerabilities = $vulnerabilities | Where-Object { $null -ne $_.VulnerabilityID }
          ## Create Jira auth header
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$jiraUser`:$jiraToken")) # ("${env:JIRA_USER}:${env:JIRA_TOKEN}"))
          $headers = @{
              "Authorization" = "Basic $base64AuthInfo"
              "Content-Type"  = "application/json"
          }
          foreach ($vulnerability in $vulnerabilities) {
              # check for skip list
              if ($vulnerabilitySkipList -contains $vulnerability.VulnerabilityID) {
                  Write-Host "The vulnerabilityID '$($vulnerability.VulnerabilityID)' is skipped as it presents in the skip list"
                  continue
              }
              else {
                  $jiraKey = "[Vulnerability] $($vulnerability.VulnerabilityID)"
                  $body = @{
                      fields     = @("key")
                      jql        = "project = $jiraProject and summary ~ '$jiraKey'"
                      maxResults = 10
                  } | ConvertTo-Json -Depth 100
                  # check for Jira ticket existence
                  try {
                      $issueExists = Invoke-RestMethod -Uri "$jiraBaseUrl/rest/api/3/search/jql" -Headers $headers -Method Post -Body $body
                      if ($issueExists.issues.count -gt 0) {
                          Write-Host "üîç Found $($issueExists.issues.count) task(s) with summary '$jiraKey'. Skipping creation..."
                          Write-Host "üîç Existing task(s) key(s): $($issueExists.issues.key)"
                          continue
                      }
                      else {
                          Write-Host "‚úÖ The task '$jiraKey' not found. Creating new task..."
                      }
                  }
                  catch {
                      Write-Host "‚ùå Failed to check the task $jiraKey. Error: $($_.ErrorDetails.Message)"
                  }
              }
              # create missing tickets
              if ($issueExists.issues.count -eq 0) {
                  try {
                      $body = @{
                          fields = @{
                              labels      = @("Vulnerability")
                              summary     = "$jiraKey"
                              project     = @{
                                  key = "VDS" # "VCST"
                              }
                              issuetype   = @{ name = "Task" }
                              assignee    = @{
                                  accountId    = "621c47c0302c6b006af0a1cd"
                                  emailAddress = "andrew.kubyshkin@virtoworks.com"
                              }
                              description = @{
                                  type    = "doc"
                                  version = 1
                                  content = @(
                                      @{
                                          type    = "paragraph"
                                          content = @(
                                              @{
                                                  type = "text"
                                                  text = "*** Automatic vulnerability ticket created from Trivy scanner ***"
                                              },
                                              @{
                                                  type    = "text"
                                                  text    = "`nWorkflow run.`n"
                                                  "marks" = @(
                                                      @{
                                                          type  = "link"
                                                          attrs = @{
                                                              href = "https://github.com/$($env:GITHUB_REPOSITORY)/actions/runs/$($env:GITHUB_RUN_ID)"
                                                          }
                                                      }
                                                  )
                                              },
                                              @{
                                                  type = "text"
                                                  text = "Title:`n    $($vulnerability.Title)`nDescription:`n    $($vulnerability.Description)`nSeverity:`n    $($vulnerability.Severity)`nCweIDs:`n    $($vulnerability.CweIDs)`nPublished:`n    $($vulnerability.PublishedDate)`n"
                                              },
                                              @{
                                                  type    = "text"
                                                  text    = "CVE URL"
                                                  "marks" = @(
                                                      @{
                                                          type  = "link"
                                                          attrs = @{
                                                              href = "https://github.com/$($env:GITHUB_REPOSITORY)/actions/runs/$($env:GITHUB_RUN_ID)"
                                                          }
                                                      }
                                                  )
                                              }
                                          )
                                      }
                                  )
                              }
                          }
                      } | ConvertTo-Json -Depth 100
                      $createdIssue = Invoke-RestMethod -Uri "$jiraBaseUrl/rest/api/3/issue" -Headers $headers -Method Post -Body $body
                      Write-Host "‚úÖ The task '$($createdIssue.key)' created with id '$($createdIssue.id)'."
                  }
                  catch {
                      Write-Host "‚ùå Failed to create the task $jiraKey. Error: $($_.Exception.Message)"
                  }
              }
          }

          # $report = Get-Content './${{ env.tag }}.json' -Raw | ConvertFrom-Json
          # $reportHash = @{}
          # foreach ($vulnerability in $report.Results) {
          #   if ($Null -ne $vulnerability.Vulnerabilities.PkgName -and $reportHash.Keys -notcontains "[$($vulnerability.Vulnerabilities.Severity)] $($vulnerability.Vulnerabilities.PkgName)"){
          #       if ($vulnerability.Vulnerabilities.PkgName.GetType().Name -eq 'String' -and $reportHash.Keys -notcontains $vulnerability.Vulnerabilities.PkgName){
          #           $reportHash.Add("[$($vulnerability.Vulnerabilities.Severity)] $($vulnerability.Vulnerabilities.PkgName)","$($vulnerability.Vulnerabilities.FixedVersion)<br />")
          #       } else {
          #           $i = 0
          #           while ($i -lt $vulnerability.Vulnerabilities.PkgName.Length) {
          #               if ($reportHash.Keys -notcontains "[$($vulnerability.Vulnerabilities.Severity[$i])] $($vulnerability.Vulnerabilities.PkgName[$i])"){
          #                   $reportHash.Add( "[$($vulnerability.Vulnerabilities.Severity[$i])] $($vulnerability.Vulnerabilities.PkgName[$i])","$($vulnerability.Vulnerabilities.FixedVersion[$i])<br />")
          #               }
          #               $i += 1
          #           }
          #       }
          #   }
          # }
          # $text = @()
          # $reportHash.keys | Sort-Object Name | ForEach-Object{
          #   $text += '{0} : {1}' -f $_, $reportHash[$_]
          # }
          # # echo "::set-output name=VULN_PACKAGES::$text"
          # echo "VULN_PACKAGES=$text" >> $env:GITHUB_OUTPUT
    
      # - shell: pwsh
      #   if: ${{ steps.trivyResult.outputs.VULN_PACKAGES != '' }} 
      #   run: |
      #     $labels = $labelsList = @()
      #     echo "Getting the list of labels"
      #     $labels = $(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/labels) | convertFrom-Json
      #     foreach ($l in $labels){
      #       $labelsList += $l.Name
      #     }
      #     echo "Labels found: $labelsList"
      #     echo "Checking 'VULNERABILITY' label to exist"
      #     if ($labelsList -notcontains 'VULNERABILITY'){
      #       echo "Creating 'VULNERABILITY' label "
      #       gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/labels -f "name=VULNERABILITY" -f "description=Docker image vulnerabilities found on `Run Trivy vulnerability scanner` step." -f "color=f29513"
      #     }
      #     $ref = "${{ GITHUB.REF_NAME }}"
      #     $PRnumber = $ref.Split("/")[0]
      #     echo "Set new comment body and label to PR"
      #     gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/$PRnumber/comments -f "body=[SEVERITY] PackageName Version(s)WithFix<br/>------<br/>${{ steps.trivyResult.outputs.VULN_PACKAGES }}" -f "labels[]=VULNERABILITY"
      #     gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/$PRnumber -f "labels[]=VULNERABILITY"

          
